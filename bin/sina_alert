__author__ = 'qipanguan'
# !/usr/bin/python2.6
'''
Directly call sina_alert Checker start function and mark pid to pid file
Stop by read pid from pid file
'''
import os
import sys
sys.path.append('/data1/dsp/sinaalert')
import signal
from checker import Checker
from optparse import OptionParser
from lib import config
from lib import ZKutil


def main():
    parser = OptionParser(usage='%prog [options] arg')
    parser.add_option('-a', '--action',
                      dest='action',
                      action='store_true',
                      help='start:start the sina alert service.'
                           'stop:stop the sina alert service.')
    parser.add_option('-c', '--config',
                      dest='config_dir',
                      action='store_true',
                      help='Put your sina alert config dir here')
    parser.add_option('-l', '--list',
                      dest='list_service',
                      type='string',
                      help='list your checking service list, like redis/mc/cs/mcq...')

    (options, args) = parser.parse_args()
    if options.list_service is None and options.config_dir is None:
        parser.print_help()

    mychecker = Checker()
    if options.config_dir and os.path.exists(options.config_dir):
        config.Config(options.config_dir)
    elif options.list_service:
        node_list = ZKutil.NodeFromZK(options.list_service).get_check_list()
        for node in node_list:
            print node
    elif args[0] == 'start':
        # Start checker and write pid to pid file
        try:
            myconfig = config.Config()
            pid_file_name = myconfig.config_parser.get('global', 'pid_file')
            if os.path.isfile(pid_file_name):
                raise RuntimeError('sinaalert pid exists, checker process may be runnning,quit now...')
            with open(pid_file_name, 'w') as pid_file:
                pid_file.write(str(os.getpid()))
            mychecker.start()
        except Exception as e:
            print 'open file:%s fail for start sinaalert cheker err:%s' % \
                  (pid_file_name, e)
            sys.exit(2)

    elif args[0] == 'stop':
        # Stop use os.kill the checker by read pid from pid file
        try:
            myconfig = config.Config()
            pid_file_name = myconfig.config_parser.get('global', 'pid_file')
            pid_file = file(pid_file_name, 'r')
            pid = int(pid_file.read().strip())
            if pid < 100:
                raise RuntimeError('pid num illegal:%s' % pid_file_name)
        except Exception as e:
            print 'open file:%s fail for stop sina alert checker err:%s' % \
                  (pid_file_name, e)
            sys.exit(2)
        pid_file.close()
        os.remove(pid_file_name)
        os.kill(pid, signal.SIGTERM)
        return True
    else:
        parser.print_help()


if __name__ == '__main__':
    main()
